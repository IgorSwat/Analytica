{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass AppStateService {\n  constructor() {\n    // False means disabled\n    // You can unlock to test some buttons\n    this.navButtonsState = new BehaviorSubject({\n      \"nav-data\": false,\n      \"nav-normalize\": false,\n      \"nav-pca\": false,\n      \"nav-stats\": false\n    });\n    this.navButtonsState$ = this.navButtonsState.asObservable();\n  }\n  setNavButtonState(buttonName, state) {\n    const currentState = this.navButtonsState.value;\n    if (!(buttonName in currentState)) {\n      console.error(`Invalid button name: ${buttonName}`);\n      return;\n    }\n    this.navButtonsState.next({\n      ...currentState,\n      [buttonName]: state\n    });\n  }\n  getNavButtonState(buttonName) {\n    const currentState = this.navButtonsState.value;\n    if (!(buttonName in currentState)) {\n      console.error(`Invalid button name: ${buttonName}`);\n      return false;\n    }\n    return currentState[buttonName];\n  }\n  static #_ = this.ɵfac = function AppStateService_Factory(t) {\n    return new (t || AppStateService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppStateService,\n    factory: AppStateService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AppStateService };","map":{"version":3,"names":["BehaviorSubject","AppStateService","constructor","navButtonsState","navButtonsState$","asObservable","setNavButtonState","buttonName","state","currentState","value","console","error","next","getNavButtonState","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\cppon\\OneDrive\\Pulpit\\io_zadanie\\Frontend\\IO-2024\\frontend\\src\\app\\app-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AppStateService {\r\n  // False means disabled\r\n  // You can unlock to test some buttons\r\n  private navButtonsState = new BehaviorSubject<{ [key: string]: boolean}>({\r\n    \"nav-data\": false,\r\n    \"nav-normalize\": false,\r\n    \"nav-pca\": false,\r\n    \"nav-stats\": false\r\n  });\r\n  public navButtonsState$ = this.navButtonsState.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  setNavButtonState(buttonName: string, state: boolean) : void {\r\n    const currentState = this.navButtonsState.value;\r\n    if (!(buttonName in currentState)) {\r\n      console.error(`Invalid button name: ${buttonName}`);\r\n      return;\r\n    }\r\n\r\n    this.navButtonsState.next({ ...currentState, [buttonName]: state});\r\n  }\r\n\r\n  getNavButtonState(buttonName: string) : boolean {\r\n    const currentState = this.navButtonsState.value;\r\n    if (!(buttonName in currentState)) {\r\n      console.error(`Invalid button name: ${buttonName}`);\r\n      return false;\r\n    }\r\n\r\n    return currentState[buttonName];\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAEtC,MAIaC,eAAe;EAW1BC,YAAA;IAVA;IACA;IACQ,KAAAC,eAAe,GAAG,IAAIH,eAAe,CAA4B;MACvE,UAAU,EAAE,KAAK;MACjB,eAAe,EAAE,KAAK;MACtB,SAAS,EAAE,KAAK;MAChB,WAAW,EAAE;KACd,CAAC;IACK,KAAAI,gBAAgB,GAAG,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;EAE7C;EAEhBC,iBAAiBA,CAACC,UAAkB,EAAEC,KAAc;IAClD,MAAMC,YAAY,GAAG,IAAI,CAACN,eAAe,CAACO,KAAK;IAC/C,IAAI,EAAEH,UAAU,IAAIE,YAAY,CAAC,EAAE;MACjCE,OAAO,CAACC,KAAK,CAAC,wBAAwBL,UAAU,EAAE,CAAC;MACnD;;IAGF,IAAI,CAACJ,eAAe,CAACU,IAAI,CAAC;MAAE,GAAGJ,YAAY;MAAE,CAACF,UAAU,GAAGC;IAAK,CAAC,CAAC;EACpE;EAEAM,iBAAiBA,CAACP,UAAkB;IAClC,MAAME,YAAY,GAAG,IAAI,CAACN,eAAe,CAACO,KAAK;IAC/C,IAAI,EAAEH,UAAU,IAAIE,YAAY,CAAC,EAAE;MACjCE,OAAO,CAACC,KAAK,CAAC,wBAAwBL,UAAU,EAAE,CAAC;MACnD,OAAO,KAAK;;IAGd,OAAOE,YAAY,CAACF,UAAU,CAAC;EACjC;EAAC,QAAAQ,CAAA,G;qBA/BUd,eAAe;EAAA;EAAA,QAAAe,EAAA,G;WAAff,eAAe;IAAAgB,OAAA,EAAfhB,eAAe,CAAAiB,IAAA;IAAAC,UAAA,EAHd;EAAM;;SAGPlB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}