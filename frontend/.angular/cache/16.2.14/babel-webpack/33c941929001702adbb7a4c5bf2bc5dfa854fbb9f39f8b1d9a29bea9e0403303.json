{"ast":null,"code":"import { HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass DataService {\n  constructor(http) {\n    this.http = http;\n    this.getDataUrl = 'http://localhost:5000/data/visualize';\n    this.updateDataUrl = 'http://localhost:5000/data/update';\n    // A customizable field, will be replaced by user input in near future\n    this.maxNoRecords = 100;\n  }\n  getData(recordsSelection = \"\") {\n    if (recordsSelection == \"\") recordsSelection = \"1-\" + this.maxNoRecords.toString();\n    const params = new HttpParams().set('selection', recordsSelection);\n    return this.http.get(this.getDataUrl, {\n      params\n    });\n  }\n  updateData(featureLabels) {\n    const paramArray = Array.from({\n      length: featureLabels.length\n    }, (_, index) => {\n      return featureLabels[index].featureType;\n    });\n    const body = JSON.stringify(paramArray);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.put(this.updateDataUrl, body, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { DataService };","map":{"version":3,"names":["HttpParams","HttpHeaders","DataService","constructor","http","getDataUrl","updateDataUrl","maxNoRecords","getData","recordsSelection","toString","params","set","get","updateData","featureLabels","paramArray","Array","from","length","_","index","featureType","body","JSON","stringify","headers","put","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\cppon\\OneDrive\\Pulpit\\io_zadanie\\Frontend\\IO-2024\\frontend\\src\\app\\data.service.ts"],"sourcesContent":["import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DataVisualization } from './models/data.model';\r\nimport { FeatureLabel } from './models/feature-types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  private getDataUrl = 'http://localhost:5000/data/visualize';\r\n  private updateDataUrl = 'http://localhost:5000/data/update';\r\n\r\n  // A customizable field, will be replaced by user input in near future\r\n  maxNoRecords: number = 100;\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  getData(recordsSelection: string = \"\"): Observable<DataVisualization> {\r\n    if (recordsSelection == \"\")\r\n      recordsSelection = \"1-\" + this.maxNoRecords.toString();\r\n\r\n    const params = new HttpParams().set('selection', recordsSelection);\r\n    return this.http.get<DataVisualization>(this.getDataUrl, {params});\r\n  }\r\n\r\n  updateData(featureLabels: FeatureLabel[]): Observable<any> {  \r\n    const paramArray : number[] = Array.from({length: featureLabels.length}, (_, index) => {\r\n      return <number>featureLabels[index].featureType;\r\n    })\r\n    const body = JSON.stringify(paramArray);\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    return this.http.put(this.updateDataUrl, body, {headers});\r\n  }\r\n  \r\n}\r\n"],"mappings":"AAAA,SAAqBA,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;;;AAM1E,MAGaC,WAAW;EAOtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,UAAU,GAAG,sCAAsC;IACnD,KAAAC,aAAa,GAAG,mCAAmC;IAE3D;IACA,KAAAC,YAAY,GAAW,GAAG;EAEc;EAExCC,OAAOA,CAACC,gBAAA,GAA2B,EAAE;IACnC,IAAIA,gBAAgB,IAAI,EAAE,EACxBA,gBAAgB,GAAG,IAAI,GAAG,IAAI,CAACF,YAAY,CAACG,QAAQ,EAAE;IAExD,MAAMC,MAAM,GAAG,IAAIX,UAAU,EAAE,CAACY,GAAG,CAAC,WAAW,EAAEH,gBAAgB,CAAC;IAClE,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAoB,IAAI,CAACR,UAAU,EAAE;MAACM;IAAM,CAAC,CAAC;EACpE;EAEAG,UAAUA,CAACC,aAA6B;IACtC,MAAMC,UAAU,GAAcC,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAEJ,aAAa,CAACI;IAAM,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAI;MACpF,OAAeN,aAAa,CAACM,KAAK,CAAC,CAACC,WAAW;IACjD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,UAAU,CAAC;IACvC,MAAMU,OAAO,GAAG,IAAIzB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACG,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACrB,aAAa,EAAEiB,IAAI,EAAE;MAACG;IAAO,CAAC,CAAC;EAC3D;EAAC,QAAAN,CAAA,G;qBAzBUlB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPjC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}